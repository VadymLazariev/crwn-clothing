{"ast":null,"code":"import{createStore,applyMiddleware}from\"redux\";import{persistStore}from\"redux-persist\";import logger from'redux-logger';import thunk from\"redux-thunk\";import createSagaMiddleware from'redux-saga';import{fetchCollectionsStart}from\"./shop/shop.sagas\";import rootSaga from\"./root.saga\";import rootReducer from'./root-reducer';var sagaMiddleware=createSagaMiddleware();var middlewares=[sagaMiddleware];if(process.env.NODE_ENV==='development'){middlewares.push(logger);}export var store=createStore(rootReducer,applyMiddleware.apply(void 0,middlewares));sagaMiddleware.run(rootSaga);export var persistor=persistStore(store);export default{persistor:persistor,store:store};","map":{"version":3,"sources":["/home/vadym-lazariev/WebstormProjects/crwn-clothing/client/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","logger","thunk","createSagaMiddleware","fetchCollectionsStart","rootSaga","rootReducer","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,KAA6C,OAA7C,CACA,OAASC,YAAT,KAA6B,eAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,MAAOC,CAAAA,oBAAP,KAAiC,YAAjC,CAGA,OAASC,qBAAT,KAAsC,mBAAtC,CAEA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,CACA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CAEA,GAAMC,CAAAA,cAAc,CAAEJ,oBAAoB,EAA1C,CAEA,GAAMK,CAAAA,WAAW,CAAG,CAACD,cAAD,CAApB,CAEA,GAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,aAA7B,CAA4C,CAC1CH,WAAW,CAACI,IAAZ,CAAiBX,MAAjB,EACD,CAED,MAAO,IAAMY,CAAAA,KAAK,CAAGf,WAAW,CAACQ,WAAD,CAAcP,eAAe,MAAf,QAAmBS,WAAnB,CAAd,CAAzB,CAEPD,cAAc,CAACO,GAAf,CAAmBT,QAAnB,EAEA,MAAO,IAAMU,CAAAA,SAAS,CAAGf,YAAY,CAACa,KAAD,CAA9B,CAEP,cAAe,CAAEE,SAAS,CAATA,SAAF,CAAaF,KAAK,CAALA,KAAb,CAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport logger from 'redux-logger';\nimport thunk from \"redux-thunk\";\nimport createSagaMiddleware from 'redux-saga';\n\n\nimport { fetchCollectionsStart } from \"./shop/shop.sagas\";\n\nimport rootSaga from \"./root.saga\";\nimport rootReducer from './root-reducer';\n\nconst sagaMiddleware= createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nsagaMiddleware.run(rootSaga);\n\nexport const persistor = persistStore(store);\n\nexport default { persistor, store };\n"]},"metadata":{},"sourceType":"module"}